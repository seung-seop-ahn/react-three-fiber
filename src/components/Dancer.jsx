/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/dancer.glb -o src/components/Dancer.jsx 
*/

import { useAnimations, useGLTF } from '@react-three/drei'
import { useGraph } from '@react-three/fiber'
import React, { useEffect, useState } from 'react'
import { SkeletonUtils } from 'three-stdlib'

export function Dancer(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('/dancer.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  const [currentAnimation, setCurrentAnimation] = useState("wave");

  useEffect(() => {
    actions[currentAnimation].fadeIn(0.5).play();
    return () => {
      actions[currentAnimation].fadeOut(0.5).stop();
    };
  }, [currentAnimation, actions]);

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      scale={0.01}
      position={[0, 0.8, 0]}
      onClick={() => {
        setCurrentAnimation((prev) => {
          if (prev === "wave") return "windmill"
          return "wave"
        })
      }}
    >
      <group name="AuxScene">
        <group position={[0, -82.942, -1.295]}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Ch03"
            geometry={nodes.Ch03.geometry}
            material={materials.Ch03_Body}
            skeleton={nodes.Ch03.skeleton}
          >
            {/* <meshStandardMaterial color="red" /> */}
          </skinnedMesh>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/dancer.glb')
